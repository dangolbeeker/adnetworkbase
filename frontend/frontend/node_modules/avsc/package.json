{
  "name": "avsc",
  "version": "4.1.4",
  "description": "Avro for JavaScript",
  "homepage": "https://github.com/mtth/avsc",
  "keywords": [
    "api",
    "avdl",
    "avpr",
    "avro",
    "avsc",
    "binary",
    "buffer",
    "data",
    "decoding",
    "encoding",
    "idl",
    "interface",
    "ipc",
    "json",
    "marshalling",
    "message",
    "protocol",
    "rpc",
    "schema",
    "serialization",
    "type"
  ],
  "files": [
    "lib",
    "etc/browser"
  ],
  "main": "./lib",
  "browser": {
    "./lib": "./etc/browser/avsc.js",
    "./lib/files": "./etc/browser/lib/files.js",
    "crypto": "./etc/browser/lib/crypto.js"
  },
  "engines": {
    "node": ">=0.11"
  },
  "scripts": {
    "cover": "istanbul cover _mocha",
    "clean": "rm -rf coverage dist node_modules",
    "dist": "./etc/scripts/dist",
    "perf": "./etc/scripts/perf etc/schemas/*",
    "test": "mocha",
    "zuul": "zuul --no-coverage -- test/*.js"
  },
  "devDependencies": {
    "coveralls": "^2.11.6",
    "istanbul": "^0.4.2",
    "mocha": "^2.3.4",
    "tmp": "^0.0.28"
  },
  "author": {
    "name": "Matthieu Monsch",
    "email": "monsch@alum.mit.edu"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git://github.com/mtth/avsc.git"
  },
  "readme": "# Avsc [![NPM version](https://img.shields.io/npm/v/avsc.svg)](https://www.npmjs.com/package/avsc) [![Build status](https://travis-ci.org/mtth/avsc.svg?branch=master)](https://travis-ci.org/mtth/avsc) [![Coverage status](https://coveralls.io/repos/mtth/avsc/badge.svg?branch=master&service=github)](https://coveralls.io/github/mtth/avsc?branch=master)\n\nPure JavaScript implementation of the [Avro\nspecification](https://avro.apache.org/docs/current/spec.html).\n\n\n## Features\n\n+ Blazingly [fast and compact][benchmarks] serialization! Typically faster than\n  JSON with much smaller encodings.\n+ All the Avro goodness and more: [type inference][type-inference], [schema\n  evolution][schema-evolution], and [remote procedure calls][rpc].\n+ Support for [serializing arbitrary JavaScript objects][logical-types].\n+ Unopinionated [64-bit integer compatibility][custom-long].\n\n\n## Installation\n\n```bash\n$ npm install avsc\n```\n\n`avsc` is compatible with all versions of [node.js][] since `0.11` and major\nbrowsers via [browserify][] (see the full compatibility table\n[here][browser-support]). For convenience, you can also find compiled\ndistributions with the [releases][] (but please host your own copy).\n\n\n## Documentation\n\n+ [Home][home]\n+ [API](https://github.com/mtth/avsc/wiki/API)\n+ [Quickstart](https://github.com/mtth/avsc/wiki/Quickstart)\n+ [Advanced usage](https://github.com/mtth/avsc/wiki/Advanced-usage)\n+ [Benchmarks][benchmarks]\n\n\n## Examples\n\nInside a node.js module, or using browserify:\n\n```javascript\nvar avro = require('avsc');\n```\n\n+ Encode and decode values from a known schema:\n\n  ```javascript\n  var type = avro.parse({\n    name: 'Pet',\n    type: 'record',\n    fields: [\n      {name: 'kind', type: {name: 'Kind', type: 'enum', symbols: ['CAT', 'DOG']}},\n      {name: 'name', type: 'string'}\n    ]\n  });\n  var buf = type.toBuffer({kind: 'CAT', name: 'Albert'}); // Encoded buffer.\n  var val = type.fromBuffer(buf); // {kind: 'CAT', name: 'Albert'}\n  ```\n\n+ Infer a value's type and encode similar values:\n\n  ```javascript\n  var val = {city: 'Cambridge', zipCodes: ['02138', '02139'], visits: 2};\n  var type = avro.infer(val);\n  // We can now encode the value:\n  var buf = type.toBuffer(val);\n  // And also any values with a matching structure:\n  var bufs = [\n    type.toBuffer({city: 'Seattle', zipCodes: ['98101'], visits: 3}),\n    type.toBuffer({city: 'NYC', zipCodes: [], visits: 0})\n  ];\n  ```\n\n+ Get a [readable stream][readable-stream] of decoded values from an Avro\n  container file:\n\n  ```javascript\n  avro.createFileDecoder('./values.avro')\n    .on('metadata', function (type) { /* `type` is the writer's type. */ })\n    .on('data', function (val) { /* Do something with the decoded value. */ });\n  ```\n\n+ Implement a TCP server for an [IDL-defined][idl] protocol:\n\n  ```javascript\n  avro.assemble('./Ping.avdl', function (err, attrs) {\n    // Generate the protocol and attach a handler for `ping` messages:\n    var protocol = avro.parse(attrs)\n      .on('ping', function (req, ee, cb) { cb(null, 'pong'); });\n    // Respond on any incoming connection:\n    require('net').createServer()\n      .on('connection', function (con) { protocol.createListener(con); })\n      .listen(8000);\n  });\n  ```\n\n\n[node.js]: https://nodejs.org/en/\n[benchmarks]: https://github.com/mtth/avsc/wiki/Benchmarks\n[type-inference]: https://github.com/mtth/avsc/wiki/Advanced-usage#type-inference\n[schema-evolution]: https://github.com/mtth/avsc/wiki/Advanced-usage#schema-evolution\n[logical-types]: https://github.com/mtth/avsc/wiki/Advanced-usage#logical-types\n[custom-long]: https://github.com/mtth/avsc/wiki/Advanced-usage#custom-long-types\n[readable-stream]: https://nodejs.org/api/stream.html#stream_class_stream_readable\n[browserify]: http://browserify.org/\n[browser-support]: https://github.com/mtth/avsc/wiki#browser-support\n[home]: https://github.com/mtth/avsc/wiki\n[rpc]: https://github.com/mtth/avsc/wiki/Advanced-usage#remote-procedure-calls\n[releases]: https://github.com/mtth/avsc/releases\n[idl]: https://avro.apache.org/docs/current/idl.html\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mtth/avsc/issues"
  },
  "_id": "avsc@4.1.4",
  "_from": "avsc@"
}
